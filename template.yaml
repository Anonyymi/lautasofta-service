AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  lautasofta-service SAM template

Parameters:
  DbHost:
    Type: String
    Default: localhost
  DbUser:
    Type: String
    Default: root
  DbPasswd:
    Type: String
    Default: root
  DbName:
    Type: String
    Default: lautasofta
  MediaBucketName:
    Type: String
    Default: lautasofta-local-media
  S3EndpointUrl:
    Type: String
    Default: http://localhost:4566

Resources:
  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
  MediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref MediaBucketName
      CorsConfiguration:
        CorsRules:
          - Id: AllowAnyOrigin
            MaxAge: '3600'
            AllowedHeaders: ['*']
            AllowedMethods: ['GET', 'POST']
            AllowedOrigins: ['*']
      # NOTE: check database/migrations/V1__init_db.sql::AutoDeleteOldPosts
      LifecycleConfiguration:
        Rules:
          - Id: ExpireObjects
            Status: 'Enabled'
            ExpirationInDays: 30
      LoggingConfiguration:
        DestinationBucketName: !Ref LogsBucket
        LogFilePrefix: 'media-bucket-logs'
  ApiHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowMediaUpload
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                Resource: !Sub 'arn:aws:s3:::${MediaBucket}/*'
  ApiHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: service/
      Handler: api.app.lambda_handler
      Runtime: python3.7
      Timeout: 3
      Environment:
        Variables:
          DB_HOST:          !Ref DbHost
          DB_USER:          !Ref DbUser
          DB_PASSWD:        !Ref DbPasswd
          DB_NAME:          !Ref DbName
          MEDIA_BUCKET:     !Ref MediaBucket
          S3_ENDPOINT_URL:  !Ref S3EndpointUrl
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
      Role: !GetAtt ApiHandlerRole.Arn
